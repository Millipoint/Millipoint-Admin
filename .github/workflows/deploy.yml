name: Multi-Environment Deploy

on:
  push:
    branches:
      - development
      - production

jobs:
  deploys:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Init Branch, Directory, and ENV
        run: |
          echo "BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
          
          case "${{ github.ref_name }}" in
            "development")
              echo "VPS_HOST=${{ secrets.VPS_HOST_DEV }}" >> $GITHUB_ENV
              echo "VPS_PORT=${{ secrets.VPS_PORT_DEV }}" >> $GITHUB_ENV
              echo "VPS_USERNAME=${{ secrets.VPS_USERNAME_DEV }}" >> $GITHUB_ENV
              
              echo "APP_DIR=/var/www/admin-dev" >> $GITHUB_ENV
            ;;
            "production")
              echo "VPS_HOST=${{ secrets.VPS_HOST_PROD }}" >> $GITHUB_ENV
              echo "VPS_PORT=${{ secrets.VPS_PORT_PROD }}" >> $GITHUB_ENV
              echo "VPS_USERNAME=${{ secrets.VPS_USERNAME_PROD }}" >> $GITHUB_ENV
              
              echo "APP_DIR=/var/www/admin" >> $GITHUB_ENV
            ;;
            *)
              echo "Branch tidak didukung untuk workflow"
              exit 1
            ;;
          esac

      - name: Init ~/.ssh folder
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
      - name: Init known-hosts
        run: |
          ssh-keyscan -p ${{ env.VPS_PORT }} -H "${{ env.VPS_HOST }}" >> ~/.ssh/known_hosts

      - name: Copying Private Key to ~/.ssh/id_rsa
        run: |
          case "${{ github.ref_name }}" in
            "development")
              echo "${{ secrets.VPS_PRIVATE_KEY_DEV }}" > ~/.ssh/id_rsa
            ;;
            "production")
              echo "${{ secrets.VPS_PRIVATE_KEY_PROD }}" > ~/.ssh/id_rsa
            ;;
          esac
          chmod 600 ~/.ssh/id_rsa

      - name: copy file via ssh rsa
        run: |
          rsync -avz -e "ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }}" \
            ./ ${{ env.VPS_USERNAME }}@${{ env.VPS_HOST }}:${{ env.APP_DIR }}

      - name: Running npm install
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} \
           ${{ env.VPS_USERNAME }}@${{ env.VPS_HOST }} << 'EOF'
             export NVM_DIR="$HOME/.nvm"
             [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
             [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

             cd ${{ env.APP_DIR }}
             npm install
             
          EOF

      - name: Running npm run build
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} \
           ${{ env.VPS_USERNAME }}@${{ env.VPS_HOST }} << 'EOF'
             export NVM_DIR="$HOME/.nvm"
             [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
             [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

             cd ${{ env.APP_DIR }}
             npm run build
             npm install -g serve
             
          EOF

      - name: Running pm2 start
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} \
           ${{ env.VPS_USERNAME }}@${{ env.VPS_HOST }} << 'EOF'
             export NVM_DIR="$HOME/.nvm"
             [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
             [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

             cd ${{ env.APP_DIR }}
             npm install

             if pm2 list | grep -q 'millipoint-admin'; then
              echo 'Process exists, restarting...'
              pm2 restart millipoint-admin
             else
              echo 'Process not found, starting...'
              cd ${{ env.APP_DIR }}
              pm2 start "serve -s build -l 3010" --name millipoint-admin
             fi
            
          EOF